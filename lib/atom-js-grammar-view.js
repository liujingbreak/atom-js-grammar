// Generated by CoffeeScript 1.10.0
var $ = require('../vendor/jquery-1.12.0');

var Emitter = require('eventemitter3');
var fs = require('fs');
var Path = require('path');

module.exports = AtomJsGrammarView;

var angular;

function AtomJsGrammarView() {
	Emitter.call(this);
	window.jQuery = $;
	require('../vendor/angular');
	angular = window.angular ? window.angular : global.angular;

	var self = this;
	$ = $ ? $ : window.$;

	this.element = document.createElement('div');
	this.element.classList.add('atom-js-grammar');

	var el = $(this.element);
	var container = $('body').find('atom-pane').eq(0);
	container.append(el);
	self.el = el;
	el.attr('tabIndex', '1');
	el.on('keydown', function(evt) {
		if (evt.keyCode === 27 || evt.keyCode === 13) { //press ESC
			self.setVisible(false);
			self.emit('close');
		}
	});

	$('body').on('click', function(evt) {
		if ($(evt.target).closest('.atom-js-grammar').length === 0) {
			self.setVisible(false);
			self.emit('close');
		}
	});

	var appEl = $(fs.readFileSync(Path.resolve(__dirname, 'view.html'), 'utf8'));
	el.append(appEl);
	angular.module('atomJsGrammar', [])
		.controller('MainController', function($rootScope, $scope) {
			var mainVm = self.mainVm = this;
			$scope.$watch('mainVm.fileName', (value, old) => {
				mainVm.title = value;
			});
			mainVm.title = mainVm.fileName;
			mainVm.jumpTo = function(line, column, start) {
				var activeEditor = atom.workspace.getActiveTextEditor();
				activeEditor.setCursorBufferPosition([line - 1, column]);
				self.setVisible(false);
				self.emit('close');
			};
			self.scope = $rootScope;
		})
		.filter('functionName', function() {
			return function(input) {
				return input ? input : '( )';
			};
		});
	require('./directives')(angular, 'atomJsGrammar');
	angular.bootstrap(this.element, ['atomJsGrammar']);
}
AtomJsGrammarView.prototype = Object.create(Emitter.prototype);

var prot = AtomJsGrammarView.prototype;
prot.getState = function() {
	return this.mainVm;
};

prot.setVisible = function(visible) {
	if (visible) {
		console.log('show');
		this.el.removeClass('invisible');
		this.apply();
	} else {
		this.el.addClass('invisible');
	}
	this.visible = visible;
};

prot.serialize = function() {};

prot.destroy = function() {
	this.el.remove();
	return this.element.remove();
};
prot.getElement = function() {
	return this.element;
};
prot.focus = function() {
	this.el.focus();
};

prot.apply = function() {
	this.scope.$apply();
};

prot._createFunctionEl = function(li, node) {
	li.addClass('list-item');
	var spanEl = $('<span>');
	spanEl.addClass('fname');
	spanEl.html(node.name ? node.name : '( )');
	li.append(spanEl);
	return li;
};
