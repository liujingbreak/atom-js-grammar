// Generated by CoffeeScript 1.10.0
var $ = require('./jquery-1.12.0.js');
var Emitter = require('eventemitter3');
var AtomJsGrammarView;

module.exports = AtomJsGrammarView = (function() {
	function AtomJsGrammarView(serializedState) {
		Emitter.call(this);
		var self = this;
		self.state = serializedState;
		$ = $ ? $ : window.$;

		this.element = document.createElement('div');
		this.element.classList.add('atom-js-grammar');

		var el = $(this.element);
		self.el = el;
		el.attr('tabIndex', '1');
		el.on('keydown', function(evt) {
			if (evt.keyCode === 27 || evt.keyCode === 13 ) { //press ESC
				self.emit('close');
			}
		});

		el.delegate('.list-item', 'click', function(evt) {
			atom.workspace.observeTextEditors(function(activeEditor) {
				var loc = $(evt.currentTarget).attr('data-loc');
				loc = self.locData[loc];
				activeEditor.setCursorBufferPosition([loc.start.line - 1, loc.start.column]);
				self.emit('close');
			});
		});

		$('body').on('click', function(evt) {
			if ($(evt.target).parents('.atom-js-grammar').length === 0) {
				self.emit('close');
			}
		});

		this.title = $('<div>');
		this.title.html('The AtomJsGrammar package is Alive! It\'s ALIVE!');
		this.title.addClass('title');
		el.append(this.title);

		this.body = $('<ul>');
		this.body.attr('tabIndex', '0');
		el.append(this.body);
		this.body.addClass('body list-tree has-collapsable-children');
	}
	AtomJsGrammarView.prototype = Object.create(Emitter.prototype);

	var prot = AtomJsGrammarView.prototype;

	prot.serialize = function() {};

	prot.destroy = function() {
		return this.element.remove();
	};
	prot.getElement = function() {
		return this.element;
	};
	prot.focus = function() {
		this.el.focus();
	};

	prot.render = function render() {
		this.title.html(this.state.fileName);
		var tree = this.state.tree;
		this.body.html('');
		this.locData = [];
		this.view4Node(tree.child, this.body, 1);
	};

	prot.view4Node = function(nodes, container, level) {
		var self = this;
		var count = 0;
		nodes.forEach(function(node) {
			var nestedItem = $('<li>');

			var subContainer = $('<ul>');
			subContainer.addClass('list-tree');
			var childCount = 0;
			if (node.child && node.child.length > 0) {
				childCount = self.view4Node(node.child, subContainer, level + 1);
			}

			if (childCount > 0) {
				nestedItem.addClass('list-nested-item');
				// if (level > 2) {
				// 	nestedItem.addClass('collapsed');
				// }
				var label = $('<div>');

				label.attr('data-loc', self.locData.length);
				self.locData.push(node.loc);

				nestedItem.append(self._createFunctionEl(label, node));
				container.append(nestedItem);
				nestedItem.append(subContainer);
				count++;
			} else {
				nestedItem.attr('data-loc', self.locData.length);
				self.locData.push(node.loc);
				if (node.name && node.name !== '=>') {
					container.append(self._createFunctionEl(nestedItem, node));
					count++;
				}
			}
		});
		return count;
	};

	prot._createFunctionEl = function(labelEl, node) {
		labelEl.addClass('list-item');
		var spanEl = $('<span>');
		spanEl.addClass('fname');
		spanEl.html(node.name ? node.name + '()' : '( )');
		labelEl.append(spanEl);
		return labelEl;
	};

	return AtomJsGrammarView;
})();
